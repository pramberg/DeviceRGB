#include "/Engine/Private/Common.ush"
#include "PostProcessMaterialInputs.ush"
#include "/Engine/Generated/Material.ush"

StructuredBuffer<float2> LedUVs;
RWStructuredBuffer<float4> Colors;
uint NumItems;

#if DEVICERGB_INDEX_BUFFER
StructuredBuffer<uint> IndexBuffer;
uint IndexBufferStart;
#endif

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void MainCS(uint3 ThreadID : SV_DispatchThreadID)
{
    if (ThreadID.x >= NumItems)
        return;

#if DEVICERGB_INDEX_BUFFER
    uint Index = IndexBuffer[ThreadID.x + IndexBufferStart];
#else
    uint Index = ThreadID.x;
#endif

    ResolvedView = ResolveView();
    float2 UV = LedUVs[Index];
    
    FMaterialPixelParameters Parameters = MakeInitializedMaterialPixelParameters();

#if NUM_TEX_COORD_INTERPOLATORS
    UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS; CoordinateIndex++)
	{
		Parameters.TexCoords[CoordinateIndex] = UV;
	}
#endif
    Parameters.VertexColor = Colors[Index];

    // Need to remap for the generated code to make sense...
    float4 SvPosition = float4(UV * View_ViewSizeAndInvSize.xy, 1e-18f, 1.0f);
    
	FPixelMaterialInputs PixelMaterialInputs;
	CalcMaterialParametersPost(Parameters, PixelMaterialInputs, SvPosition, true);

	const float Alpha = GetMaterialOpacity(PixelMaterialInputs);
    const float3 Emissive = GetMaterialEmissive(PixelMaterialInputs);
    const float4 Output = float4(Emissive, Alpha);

#if DEVICERGB_BLEND_MODE == 0
	Colors[Index] = lerp(Colors[Index], Output, Alpha);
#elif DEVICERGB_BLEND_MODE == 1
	Colors[Index] += Output;
#elif DEVICERGB_BLEND_MODE == 2
	Colors[Index] *= Output;
#endif
}